name: ðŸš€ Auto Deploy aj-static-site to EC2

on:
  push:
    branches:
      - main   # Deploy automatically when pushing to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # âœ… Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # âœ… Step 2: Build Docker image with correct name
      - name: Build Docker image (no cache)
        run: |
          docker build  --no-cache -t aj-static-site:latest -f docker/Dockerfile .

      # âœ… Step 3: Save Docker image as tar and fix permissions
      - name: Save Docker image as tar and fix permissions
        run: |
          docker save aj-static-site:latest -o static-web.tar
          sudo chmod 777 static-web.tar
          ls -lh static-web.tar

      # âœ… Step 4: Copy image to EC2
      - name: Copy image to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "static-web.tar"
          target: "/home/ubuntu/static-web.tar"
          overwrite: true

      # âœ… Step 5: SSH into EC2 and deploy container
      - name: Load and restart container on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "ðŸ›‘ Stopping old container (if exists)..."
            sudo docker stop aj-static-site || true
            sudo docker rm aj-static-site || true

            echo "ðŸ“¦ Loading new image..."
            sudo docker load -i /home/ubuntu/static-web.tar

            echo "ðŸš€ Starting new container..."
            sudo docker run -d -p 80:80 --name aj-static-site aj-static-site:latest

            echo "ðŸ§¹ Cleaning up old resources..."
            sudo docker system prune -f

            echo "âœ… Deployment successful!"
